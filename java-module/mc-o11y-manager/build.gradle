plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.12'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id 'com.epages.restdocs-api-spec' version '0.19.4'
    id 'com.diffplug.spotless' version '7.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-core'
    implementation 'io.github.openfeign:feign-httpclient'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.apache.sshd:sshd-core:2.15.0'
    implementation 'org.apache.sshd:sshd-sftp:2.15.0'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.3'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.influxdb:influxdb-java'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.influxdb:flux-dsl:7.3.0'
    implementation 'org.jooq:jooq:3.18.7'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework:spring-test:6.1.3'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
    testImplementation 'com.h2database:h2'

}


spotless {
    java {
        importOrder(
                'java|javax|jakarta',
                'org.springframework',
                'lombok',
                '',
                'org.junit|org.mockito',
                '\\#',
                '\\#org.junit'
        )

        googleJavaFormat('1.17.0').aosp()

        formatAnnotations()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()

    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

bootJar {
    archiveBaseName = "mc-o11y-manager"
    archiveFileName = "mc-o11y-manager.jar"
    archiveVersion = "0.3.1"
}



openapi {
    setHost('localhost:18080')
    title = 'MC-Observability API Documentation'
    version = '0.4.1'
    description = 'API documentation for MC-Observability'
    format = 'yaml'
    outputFileNamePrefix = 'MC-Observability Swagger(OpenAPI 2.0)'
}

openapi3 {
    setServer('localhost:18080')
    title = 'MC-Observability API Documentation'
    description = 'API documentation for MC-Observability'
    version = '0.4.1'
    format = 'yaml'
    outputFileNamePrefix = 'MC-Observability Swagger(OpenAPI 3.0)'
}

tasks.register('runSpringBootInBackground') {
    doLast {
        println 'Starting mc-o11y-manager in the background...'
        def processBuilder = new ProcessBuilder('java', '-jar', 'build/libs/mc-o11y-manager.jar')
        processBuilder.redirectOutput(new File("build/mc-o11y-manager.log"))
        processBuilder.redirectError(new File("build/mc-o11y-manager-error.log"))
        processBuilder.start()
        println 'mc-o11y-manager started in the background (logs in build/mc-o11y-manager.log).'

        println 'Waiting for 20 seconds before generating Swagger documentation...'
        Thread.sleep(20000)
    }
}

tasks.register('stopSpringBoot') {
    doLast {
        println 'Stopping mc-o11y-manager...'
        def pidFile = file("../mc-o11y-manager.pid")
        println pidFile.path
        if (pidFile.exists()) {
            def pid = pidFile.text.trim()
            exec {
                commandLine 'kill', '-9', pid
            }
            println "mc-o11y-manager stopped (PID: ${pid})"
            pidFile.delete()
        } else {
            println "PID file not found, mc-o11y-manager might not be running."
        }
    }
}

tasks.register('generateSwaggerYaml', Exec) {
    println 'Generating Swagger documentation...'
    commandLine 'curl', '-o', 'swagger/swagger.yaml', 'http://127.0.0.1:18080/v3/api-docs.yaml'
    doLast {
        println 'Swagger YAML file has been generated.'
    }
}

generateSwaggerYaml.dependsOn runSpringBootInBackground
stopSpringBoot.mustRunAfter generateSwaggerYaml
