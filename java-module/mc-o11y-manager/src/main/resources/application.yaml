server:
  port: ${SERVER_PORT:18080}
  error:
    include-stacktrace: never

deploy:
  site-code: ${SITE_CODE:m-cmp}

spring:
  application:
    name: ${SPRING_APP_NAME:mc-o11y-manager}
  datasource:
    url: jdbc:mariadb://${DATABASE_HOST}:${DATABASE_PORT:3306}/${DATABASE_NAME}
    username: ${DATABASE_ID}
    password: ${DATABASE_PW}
    hikari:
      max-lifetime: 150000
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MariaDBDialect
        format_sql: false
        use_sql_comments: false
    open-in-view: false
    show-sql: false
  banner:
    location: classpath:banner.txt

springdoc:
  packages-to-scan: com.mcmp.o11ymanager.controller
  paths-to-match: "/**"
  paths-to-exclude:
    - "/api/**/test/**"
  api-docs:
    enabled: true
  swagger-ui:
    path: /api/docs
  default-produces-media-type: application/json

loki:
  url: ${LOKI_URL:http://mc-observability-loki:3100}
  endpoints:
    query: /loki/api/v1/query
    range: /loki/api/v1/query_range

influxdb:
  servers:
    - url: ${INFLUX1_URL}
      database: ${INFLUX1_DATABASE}
      retention-policy: ${INFLUX1_RETENTION_POLICY}
      username: ${INFLUX1_USERNAME}
      password: ${INFLUX1_PASSWORD}
      uid: ${INFLUX1_UID}
    - url: ${INFLUX2_URL}
      database: ${INFLUX2_DATABASE}
      retention-policy: ${INFLUX2_RETENTION_POLICY}
      username: ${INFLUX2_USERNAME}
      password: ${INFLUX2_PASSWORD}
      uid: ${INFLUX2_UID}

health:
  check-interval: ${HEALTH_INTERVAL:10000}
  host-connection-check-timeout: ${HEALTH_TIMEOUT:5000}

ssh:
  connection-timeout: 10000
  ssh-connection-cache-timeout: 120000

feign:
  okhttp:
    enabled: true
  client:
    config:
      default:
        connect-timeout: ${FEIGN_CONNECT_TIMEOUT:5000}
        read-timeout: ${FEIGN_READ_TIMEOUT:30000}
        loggerLevel: full
      LokiFeignClient:
        loggerLevel: full
  semaphore:
    url: ${SEMAPHORE_URL}
    username: ${SEMAPHORE_USER}
    password: ${SEMAPHORE_PASS}
    project-name: ${SEMAPHORE_PROJECT}
    init-max-parallel-tasks: ${SEMAPHORE_MAX_TASKS:10}
    template-names:
      agent-install: ${SEMAPHORE_TEMPLATE_INSTALL}
      agent-config-update: ${SEMAPHORE_TEMPLATE_CONFIG}
    task-check-scheduler:
      check-interval-sec: ${SEMAPHORE_CHECK_INTERVAL:5}
      max-wait-minutes: ${SEMAPHORE_MAX_WAIT:10}
  cb-tumblebug:
    connect-timeout: 5000
    read-timeout: 600000
    url: ${TUMBLEBUG_URL}
    id: ${TUMBLEBUG_ID}
    pw: ${TUMBLEBUG_PW}
  cb-spider:
    url: ${SPIDER_URL}
    id: ${SPIDER_ID}
    pw: ${SPIDER_PW}
  insight:
    url: ${INSIGHT_URL}

grafana:
  url: ${GRAFANA_URL}
  api-key: ${GRAFANA_API_KEY}

ollama:
  base-url: ${OLLAMA_BASE_URL}

logging:
  file:
    path: ${FILE_PATH:/applog}
    name: ${FILE_NAME:${spring.application.name}}
  logback:
    rollingpolicy:
      max-file-size: ${MAX_FILE_SIZE:200MB}
      max-history: ${MAX_HISTORY:14}

management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: ${TRACE_PROB:1.0}

notification:
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    smtpAuth: ${SMTP_AUTH:true}
    tlsRequired: ${SMTP_TLS_REQUIRED:true}
    tlsEnable: ${SMTP_TLS_ENABLE:true}
  sms:
    from: ${SMS_FROM}
    serviceId: ${SMS_SERVICE_ID}
    accessKey: ${SMS_ACCESS_KEY}
    secretKey: ${SMS_SECRET_KEY}
    provider: ${SMS_PROVIDER}
    baseUrl: ${SMS_BASEURL}
  kakao:
    channelId: ${KAKAO_CHANNEL_ID}
    templateCode: ${KAKAO_TEMPLATE_CODE}
    serviceId: ${KAKAO_SERVICE_ID}
    accessKey: ${KAKAO_ACCESS_KEY}
    secretKey: ${KAKAO_SECRET_KEY}
    provider: ${KAKAO_PROVIDER}
    baseUrl: ${KAKAO_BASEURL}
  slack:
    token: ${SLACK_OAUTH_TOKEN}
    baseUrl: ${SLACK_BASEURL}
    apiPath: ${SLACK_API_PATH}

rabbitmq:
  host: ${RABBITMQ_HOST}
  port: ${RABBITMQ_PORT}
  username: ${RABBITMQ_USERNAME}
  password: ${RABBITMQ_PASSWORD}
  virtual-host: ${RABBITMQ_VHOST:/}
  alert:
    queueName: ${RABBIT_ALERT_QUEUE}
    exchangeName: ${RABBIT_ALERT_EXCHANGE}
    routingKey: ${RABBIT_ALERT_ROUTING_KEY}
    deadLetterQueueName: ${RABBIT_DLQ}
    deadLetterExchangeName: ${RABBIT_DLX}
    deadLetterRoutingKey: ${RABBIT_DLQ_ROUTING_KEY}
    mqttExchangeName: ${RABBIT_MQTT_EXCHANGE}
