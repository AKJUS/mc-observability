networks:
  internal_network:
    internal: true
  external_network:
    driver: bridge

services:
  mc-observability-manager:
    # image: cloudbaristaorg/mc-observability:edge
    build:
      context: .
      dockerfile: Dockerfile
    image: mc-observability-manager:latest
    container_name: mc-observability-manager
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - 18080:18080
    depends_on:
      mc-observability-maria:
        condition: service_healthy
      mc-observability-infra:
        condition: service_healthy
    environment:
      - JAVA_TOOL_OPTIONS=-javaagent:/config/otel/opentelemetry-javaagent.jar -XX:-UseContainerSupport
      - TUMBLEBUG_URL=${TUMBLEBUG_URL:-http://cb-tumblebug:1323}
      - TUMBLEBUG_ID=${TUMBLEBUG_ID:-default}
      - TUMBLEBUG_PW=${TUMBLEBUG_PW:-default}
      - SPIDER_URL=${SPIDER_URL:-http://cb-spider:1024}
      - SPIDER_ID=${SPIDER_ID:-}
      - SPIDER_PW=${SPIDER_PW:-}
      - INSIGHT_URL=http://mc-observability-insight:9001
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mc-observability-maria:3306/mc_observability
      - SPRING_DATASOURCE_USERNAME=mc-agent
      - SPRING_DATASOURCE_PASSWORD=mc-agent
     # --- otel options ---
      # ===== include/exclude span  =====
      - OTEL_INSTRUMENTATION_RUNTIME_METRICS_ENABLED=false
#      - OTEL_INSTRUMENTATION_METHODS_INCLUDE=${OTEL_METHODS_INCLUDE}
#      - OTEL_INSTRUMENTATION_METHODS_EXCLUDE=${OTEL_METHODS_EXCLUDE}

      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-mc-o11y-manager}
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=none
#      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
#      - OTEL_EXPORTER_OTLP_PROTOCOL=${OTEL_EXPORTER_OTLP_PROTOCOL}



      # ===== disable auto otel instrumentation =====
#      - OTEL_INSTRUMENTATION_KAFKA_ENABLED=false
#      - OTEL_INSTRUMENTATION_RABBITMQ_ENABLED=false
#      - OTEL_INSTRUMENTATION_LETTUCE_ENABLED=false
#      - OTEL_INSTRUMENTATION_JEDIS_ENABLED=false
#      - OTEL_INSTRUMENTATION_REDISSON_ENABLED=false
#      - OTEL_INSTRUMENTATION_MONGO_ENABLED=false
#      - OTEL_INSTRUMENTATION_GRPC_ENABLED=false
#      - OTEL_INSTRUMENTATION_SPRING_SCHEDULING_ENABLED=false
#      - OTEL_INSTRUMENTATION_EXECUTOR_ENABLED=false
      - OTEL_INSTRUMENTATION_MICROMETER_ENABLED=false
#      - OTEL_INSTRUMENTATION_AWS_SDK_ENABLED=false


    volumes:
      - ./mc-o11y-manager/config:/config
      - ./mc-o11y-manager/applog:/applog
      # - ./manager-conf:/etc/mc-observability-agent/conf:rw
    healthcheck:
      start_period: 30s
      test: 'curl -s http://127.0.0.1:18080/api/docs ; STATUS=`echo $$?` ; if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then exit 1 ; fi'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-infra:
    # image: cloudbaristaorg/mc-observability-infra:edge
    build:
      context: .
      dockerfile: Dockerfile.semaphore
    image: mc-observability-infra:latest
    container_name: mc-observability-infra
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - 33000:3000
    depends_on:
      mc-observability-maria:
        condition: service_healthy
    environment:
      SEMAPHORE_DB_DIALECT: mysql
      SEMAPHORE_DB_HOST: mc-observability-maria
      SEMAPHORE_DB_NAME: semaphore
      SEMAPHORE_DB_USER: semaphore
      SEMAPHORE_DB_PASS: semaphorepass
      SEMAPHORE_ADMIN: admin
      SEMAPHORE_ADMIN_PASSWORD: semaphorepass
      SEMAPHORE_ADMIN_NAME: rnd-admin
      SEMAPHORE_ADMIN_EMAIL: rnd-admin@innogrid.com
      MAX_TASK_DURATION_SEC: 600
      SEMAPHORE_MAX_PARALLEL_TASKS: 10
      SEMAPHORE_MAX_TASKS_PER_TEMPLATE: 10
      ANSIBLE_HOST_KEY_CHECKING: False
    volumes:
      - ./ansible:/ansible
    healthcheck:
      start_period: 30s
      test: 'curl -s http://127.0.0.1:3000/api/ping ; STATUS=`echo $$?` ; if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then exit 1 ; fi'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-maria:
    image: mariadb:10.11.11
    container_name: mc-observability-maria
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - 3306:3306
    volumes:
      - /docker/mariadb/etc/mysql/conf.d:/etc/mysql/conf.d:ro
      - /docker/mariadb/var/lib/mysql:/var/lib/mysql
      - /docker/mariadb/var/log/maria:/var/log/maria
      - ./maria_init.sql:/docker-entrypoint-initdb.d/maria_init.sql
      - ./mariadb-conf/99-max-connections.cnf:/etc/mysql/mariadb.conf.d/99-max-connections.cnf
    environment:
      - TZ="Asia/Seoul"
      - ALLOW_EMPTY_PASSWORD=no
      - MARIADB_ROOT_PASSWORD=qwe1212!Q
      - MARIADB_USER=mc-agent
      - MARIADB_DATABASE=mc_observability
      - MARIADB_PASSWORD=mc-agent
    healthcheck:
      start_period: 30s
      test: 'mysql -uroot -p"$$MARIADB_ROOT_PASSWORD" -e"SELECT 1;" || exit 1'
      interval: 10s
      timeout: 10s
      retries: 30

  # CB-Tumblebug
  cb-tumblebug:
    image: cloudbaristaorg/cb-tumblebug:0.11.0
    container_name: cb-tumblebug
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - internal_network
      - external_network
      # - terrarium_network # Uncomment this line when you use this compose and the terrarium compose
    ports:
      - 1323:1323
    depends_on:
      cb-tumblebug-etcd:
        condition: service_started
      cb-spider:
        condition: service_started
      cb-tumblebug-postgres:
        condition: service_healthy
    volumes:
      - ./conf/setup.env:/app/conf/setup.env
      - ./conf/cloud_conf.yaml:/app/conf/cloud_conf.yaml
      - ~/.cloud-barista/credentials.yaml.enc:/app/conf/credentials.yaml.enc
      - /docker/cb-tumblebug-container/meta_db/:/app/meta_db/
      - /docker/cb-tumblebug-container/log/:/app/log/
    environment:
      # - TB_ROOT_PATH=/app
      # # Enable TB_SELF_ENDPOINT to specify an endpoint for CB-TB API (default: localhost:1323)
      # # Use public IP if you want to access the API Dashboard from outside of localhost
      # - TB_SELF_ENDPOINT=xxx.xxx.xxx.xxx:1323
      - TB_SPIDER_REST_URL=http://cb-spider:1024/spider
      - TB_ETCD_ENDPOINTS=http://cb-tumblebug-etcd:2379
      - TB_TERRARIUM_REST_URL=http://mc-terrarium:8055/terrarium
      - TB_IAM_MANAGER_REST_URL=http://mc-iam-manager:5000
      # - TB_ETCD_AUTH_ENABLED=false
      # - TB_ETCD_USERNAME=default
      # - TB_ETCD_PASSWORD=default
      - TB_POSTGRES_ENDPOINT=cb-tumblebug-postgres:5432
      - TB_POSTGRES_DATABASE=cb_tumblebug
      - TB_POSTGRES_USER=cb_tumblebug
      - TB_POSTGRES_PASSWORD=cb_tumblebug
      # - TB_TERRARIUM_API_USERNAME=default
      # - TB_TERRARIUM_API_PASSWORD=default
      # - TB_ALLOW_ORIGINS=*
      # - TB_AUTH_ENABLED=true
      # - TB_AUTH_MODE=jwt
      # - TB_API_USERNAME=default
      # - TB_API_PASSWORD=$$2a$$10$$4PKzCuJ6fPYsbCF.HR//ieLjaCzBAdwORchx62F2JRXQsuR3d9T0q
      # - TB_AUTOCONTROL_DURATION_MS=10000
      # - TB_DRAGONFLY_REST_URL=http://cb-dragonfly:9090/dragonfly
      # - TB_DEFAULT_NAMESPACE=default
      # - TB_DEFAULT_CREDENTIALHOLDER=admin
      # - TB_LOGFILE_PATH=/app/log/tumblebug.log
      # - TB_LOGFILE_MAXSIZE=1000
      # - TB_LOGFILE_MAXBACKUPS=3
      # - TB_LOGFILE_MAXAGE=30
      # - TB_LOGFILE_COMPRESS=false
      # - TB_LOGLEVEL=debug
      # - TB_LOGWRITER=both
      # - TB_NODE_ENV=development
    healthcheck: # for CB-Tumblebug
      test: ["CMD", "curl", "-f", "http://localhost:1323/tumblebug/readyz"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s

  # CB-Tumblebug ETCD
  # This is used for storing CB-Tumblebug metadata.
  cb-tumblebug-etcd:
    image: gcr.io/etcd-development/etcd:v3.5.14
    container_name: cb-tumblebug-etcd
    networks:
      - internal_network
    ports:
      - 2379:2379
      - 2380:2380
    volumes:
      - /docker/etcd/data:/etcd-data
    entrypoint: /usr/local/bin/etcd
    command:
      - --name
      - s1
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://0.0.0.0:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://0.0.0.0:2380
      - --initial-cluster
      - s1=http://0.0.0.0:2380
      - --initial-cluster-token
      - tkn
      - --initial-cluster-state
      - new
      - --log-level
      - info
      - --logger
      - zap
      - --log-outputs
      - stderr
      - --auth-token
      - simple
    healthcheck: # for etcd
      test: ["CMD", "/usr/local/bin/etcd", "--version"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s

  # CB-Tumblebug PostgreSQL
  # This is used for storing CB-Tumblebug Spec and Image.
  cb-tumblebug-postgres:
    image: postgres:16-alpine
    container_name: cb-tumblebug-postgres
    restart: always
    networks:
      - internal_network
      # # Enable external network for outbound access (not ideal for security)
      - external_network
    ports:
      - 5432:5432
    volumes:
      - /docker/cb-tumblebug-container/meta_db/postgres/:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=cb_tumblebug
      - POSTGRES_PASSWORD=cb_tumblebug
      - POSTGRES_DB=cb_tumblebug
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cb_tumblebug"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # CB-Spider
  cb-spider:
    image: cloudbaristaorg/cb-spider:0.10.8
    container_name: cb-spider
    # build:
    #   context: ../cb-spider
    #   dockerfile: Dockerfile
    networks:
      - internal_network
      - external_network # for outbound access (not ideal for security)
    # expose:
    #   - 1024
    ports:
      - 1024:1024
    volumes:
      - /docker/cb-spider_azure_monitoring/meta_db/:/root/go/src/github.com/cloud-barista/cb-spider/meta_db/
      - /docker/cb-spider_azure_monitoring/log/:/root/go/src/github.com/cloud-barista/cb-spider/log/
    environment:
      - PLUGIN_SW=OFF
      - SERVER_ADDRESS=0.0.0.0:1024
      # if you leave these values empty, REST Auth will be disabled.
      # - API_USERNAME=
      # - API_PASSWORD=
      - SPIDER_LOG_LEVEL=error
      - SPIDER_HISCALL_LOG_LEVEL=error
      - ID_TRANSFORM_MODE=OFF
    healthcheck: # for CB-Spider
      test: ["CMD", "curl", "-f", "http://localhost:1024/spider/readyz"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s

  mc-observability-influx:
    image: influxdb:1.11.8
    container_name: mc-observability-influx
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - 8086:8086
    environment:
      - INFLUXDB_USER=mc-agent
      - INFLUXDB_PASSWORD=mc-agent
      - INFLUXDB_DB=mc-observability
    volumes:
      - /docker/influxdb/config:/etc/influxdb
      - /docker/influxdb/var/lib/influxdb:/root/.influxdb
      - ./influxdb_init:/docker-entrypoint-initdb.d
    healthcheck:
      start_period: 30s
      test: 'curl -s http://127.0.0.1:8086/ping ; STATUS=`echo $$?` ; if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then exit 1 ; fi'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-loki:
    image: grafana/loki:3.4.2
    container_name: mc-observability-loki
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - "3100:3100"
    depends_on:
      mc-observability-loki-init-volumes:
        condition: service_completed_successfully
      mc-observability-minio:
        condition: service_healthy
    environment:
      - TZ=Asia/Seoul
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./loki-conf/config.yml:/etc/loki/local-config.yaml
      - /docker/loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      start_period: 30s
      test: 'wget --quiet --spider http://127.0.0.1:3100/metrics || exit 1'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-loki-init-volumes:
    image: busybox:stable
    container_name: mc-observability-loki-init-volumes
    restart: no
    command: ["sh", "-c", "chown -R 10001:10001 /loki"]
    volumes:
      - /docker/loki_data:/loki
    user: root
    init: true
    networks:
      - internal_network

  mc-observability-minio:
    # image: cloudbaristaorg/mc-observability-minio:edge
    build:
      context: .
      dockerfile: Dockerfile.minio
    image: mc-observability-minio:latest
    container_name: mc-observability-minio
    restart: always
    networks:
      - internal_network
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=mc-agent
    volumes:
      - /docker/minio_data:/minio/data
    healthcheck:
      start_period: 30s
      test: 'curl -s http://127.0.0.1:9001/api/docs ; STATUS=`echo $$?` ; if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then exit 1 ; fi'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-grafana:
    # image: cloudbaristaorg/mc-observability-grafana:edge
    build:
      context: .
      dockerfile: Dockerfile.grafana
    image: mc-observability-grafana:latest
    container_name: mc-observability-grafana
    restart: always
    networks:
      - internal_network
      - external_network
    ports:
      - "8443:8443"
    depends_on:
      mc-observability-grafana-init-volumes:
        condition: service_completed_successfully
    environment:
      - TZ=Asia/Seoul
      - GF_DATE_FORMATS_DEFAULT_TIMEZONE=Asia/Seoul
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mc-agent
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_LOG_FILTERS=debug
      - GF_ALERTING_PROVISIONING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_SMTP_ENABLED=true
      - GF_ALERTING_EVALUATION_INTERVAL=10s
      - ALARM_END_POINT_URL=http://mc-observability-alarm:8888/api/alarm/send-alarm
      - ALARM_END_POINT_USERNAME=admin
      - ALARM_END_POINT_PASSWORD=mc-agent
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - /docker/grafana_data/data:/var/lib/grafana
      - /docker/grafana_data/log:/var/log/grafana
    healthcheck:
      start_period: 30s
      test: |
        curl -s http://127.0.0.1:3000
        STATUS=`echo $$?`
        if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then
          exit 1
        fi
        curl -k -s https://127.0.0.1:8443
        STATUS=`echo $$?`
        if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then
          exit 1
        fi
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-grafana-init-volumes:
    image: busybox:stable
    container_name: mc-observability-grafana-init-volumes
    restart: no
    command: ["sh", "-c", "chown -R 472:472 /var/lib/grafana && chown -R 472:472 /var/log/grafana"]
    volumes:
      - /docker/grafana_data/data:/var/lib/grafana
      - /docker/grafana_data/log:/var/log/grafana
    user: root
    init: true
    networks:
      - internal_network

  mc-observability-chronograf:
    image: chronograf:1.9.4
    container_name: mc-observability-chronograf
    restart: always
    ports:
      - 8888:8888
    volumes:
      - /docker/chronograf_data:/var/lib/chronograf
    networks:
      - internal_network
      - external_network
    environment:
      - INFLUXDB_URL=http://172.17.0.1:8086

  mc-observability-insight:
    image: cloudbaristaorg/mc-o11y-insight:edge
    container_name: mc-observability-insight
    restart: always
    ports:
      - 9001:9001
    environment:
      - TZ=Asia/Seoul
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-}
    volumes:
      - ../python/insight/log:/mc-insight/log
    networks:
      - internal_network
      - external_network

  mc-observability-insight-scheduler:
    image: cloudbaristaorg/mc-o11y-insight-scheduler:edge
    container_name: mc-observability-insight-scheduler
    restart: always
    ports:
      - 9002:9002
    depends_on:
      mc-observability-maria:
        condition: service_started
    environment:
      - TZ=Asia/Seoul
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=mysql+mysqldb://mc-agent:mc-agent@mc-observability-maria:3306/mc_airflow
    networks:
      - internal_network
      - external_network
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command: >
      /bin/bash -c "
        # Wait for MySQL
        sleep 10

        # Clean up pid
        rm -f airflow-webserver.pid

        # Set up metadata database
        airflow db init

        # Create default user
        airflow users create --username admin --password admin --email admin@innogrid.com --firstname admin --lastname admin --role Admin

        # Import variables & Make connections
        airflow variables set --description 'O11Y Manger API BASE URL' API_BASE_URL http://mc-observability-manager:18080/api/o11y

        airflow connections add --conn-type http --conn-host mc-observability-insight --conn-schema http --conn-port 9001 api_base_url
        airflow connections add --conn-type mysql --conn-host mc-observability-maria --conn-schema mc_observability --conn-login mc-agent --conn-password mc-agent --conn-port 3306 mcmp_db
        airflow connections add --conn-type influxdb --conn-host mc-observability-influx --conn-port 8086 --conn-schema downsampling --conn-login mc-agent --conn-password mc-agent influxdb

        # Reload & Run dags
        airflow dags reserialize
        airflow dags unpause anomaly_detection
        airflow dags unpause down_sampling

        # Start airflow
        airflow scheduler & airflow webserver -p 9002

        # Keep the server on no matter what
        sleep infinity
            "
    healthcheck:
      start_period: 30s
      test: 'curl -s http://127.0.0.1:9002 ; STATUS=`echo $?` ; if [ $$STATUS != 0 ] && [ $$STATUS != 52 ]; then exit 1 ; fi'
      interval: 10s
      timeout: 10s
      retries: 30

  mc-observability-mcp-grafana:
    image: mcp/grafana:latest
    container_name: mc-observability-mcp-grafana
    restart: always
    tty: true
    stdin_open: true
    ports:
      - "8000:8000"
    environment:
      - GRAFANA_URL=${GRAFANA_URL:-}
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-}
    command:
      - "--disable-sift"
      - "--disable-incident"
      - "--disable-search"
    networks:
      - internal_network
      - external_network
