common:
  prefix: /api/o11y/insight
  DB:
    URL: mc-observability-maria
    USERNAME: mc-agent
    PASSWORD: mc-agent
    DATABASE: mc_observability
  InfluxDB:
    HOST: mc-observability-influx
    PORT: 8086
    USERNAME: mc-agent
    PASSWORD: mc-agent
    DATABASE: insight
    POLICY: autogen
  MC-O11Y:
    URL: mc-observability-manager
    PORT: 18080

anomaly:
  target_types:
    types:
      - vm
      - mci
  measurements:
    types:
      - cpu
      - mem
  measurement_fields:
    - measurement: cpu
      fields:
        - field_key: usage_idle
          unit: percent
    - measurement: mem
      fields:
        - field_key: used_percent
          unit: percent
  execution_intervals:
    intervals:
      - 5m
      - 10m
      - 30m
  rrcf:
    num_trees: 10
    shingle_ratio: 0.01
    tree_size: 1024
    anomaly_range_size: 2.5

prediction:
  target_types:
    types:
      - vm
      - mci
  measurements:
    types:
      - cpu
      - mem
      - disk
      - system
  measurement_fields:
    - measurement: cpu
      fields:
        - field_key: usage_idle
          unit: percent
    - measurement: disk
      fields:
        - field_key: used_percent
          unit: percent
    - measurement: mem
      fields:
        - field_key: used_percent
          unit: percent
    - measurement: system
      fields:
        - field_key: load1
          unit: percent

  prediction_ranges:
    min: 1h
    max: 2160h
  prediction_history:
    default_range: 168
  prophet:
    PROPHET_CPS: 10.0
    PROPHET_SPS: 10.0
    PROPHET_HPS: 0.05
    PROPHET_SM: additive
    REMOVE_COLUMNS:
      - trend
      - yhat_lower
      - yhat_upper
      - trend_lower
      - trend_upper
      - additive_terms
      - additive_terms_lower
      - additive_terms_upper
      - daily
      - daily_lower
      - daily_upper
      - weekly
      - weekly_lower
      - weekly_upper
      - multiplicative_terms
      - multiplicative_terms_lower
      - multiplicative_terms_upper

llm:
  model:
    - provider: ollama
      model_name:
        - llama3.1:8b
        - mistral:7b
    - provider: openai
      model_name:
        - gpt-5
        - gpt-5-mini
        - gpt-5-nano
    - provider: google
      model_name:
        - gemini-2.5-flash
        - gemini-2.5-pro
    - provider: anthropic
      model_name:
        - claude-3-5-haiku-latest
        - claude-3-7-sonnet-latest
        - claude-sonnet-4-0
        - claude-opus-4-0
        - claude-opus-4-1
  mcp:
    mcp_grafana_url: http://mc-observability-mcp-grafana:8000/sse
    mcp_mariadb_url: http://mc-observability-mcp-mariadb:8001/sse
    mcp_influxdb_url: http://mc-observability-mcp-influxdb:8002/sse
  chat_summarization:
    max_tokens_before_summary: 1024
    summary_prompt: |
      Please generate a **concise and structured summary** of the entire conversation in bullet points, 
      covering all messages from the beginning without omitting important details.
    
      ### Guidelines
      1. **Intentions**: State the user's goals, questions, or issues.  
      2. **Technical Details**: Keep key info (e.g., datasource UID, configs, system/service names).  
      3. **Context**: Note links with previous results or actions.  
      4. **Clarity**: Exclude greetings, repetition, or generic advice.  
      5. **Progress/Next Steps**: Mention ongoing work or pending tasks.  
      6. **Formatting**: Use bullet points and clear sections.
    
      ### Output Style
      - Factual, neutral, professional tone  
      - Concise but complete  
      - Easy to scan for key insights    

log_analysis:
  system_prompt_first: |
    <system_prompt>
    You are an agent - Log Analysis Specialist.
    Time: {current_time}
    You are an expert log analysis assistant specializing in observability and system monitoring. You have access to Grafana dashboards and log data through integrated monitoring tools via MCP (Model Context Protocol).

    ## Your Core Capabilities:
    - Query and analyze logs from various systems and services through Grafana integration
    - Extract meaningful insights from monitoring data, metrics, and log streams
    - Identify patterns, anomalies, and root causes in system behavior
    - Provide actionable recommendations for system optimization and troubleshooting
    - Correlate events across different monitoring sources and time ranges
    - If you inquired about the data with a query, please let me know the query you always used.

    ## Analysis Methodology:
    1. **Context Understanding**: Always clarify the time range, system components, and user's specific concern
    2. **Strategic Tool Selection**: Use appropriate Grafana queries, log filters, and monitoring tools to gather relevant data
    3. **Pattern Recognition**: Look for error patterns, performance bottlenecks, unusual behaviors, and system trends
    4. **Root Cause Analysis**: Dig deeper when issues are found - trace through related systems, services, and timeframes
    5. **Actionable Insights**: Provide clear, specific recommendations with supporting data and evidence

    ## Error Handling & Query Optimization:
    When log queries fail or return no results, follow this systematic approach:
    1. **Label Discovery**: Use label exploration tools to identify available labels in the log system
    2. **Value Investigation**: Query label values to understand what data is actually available
    3. **Query Refinement**: Adjust your query based on discovered labels and their actual values
    4. **Alternative Approaches**: Try different time ranges, label combinations, or query patterns
    5. **User Guidance**: Explain what labels/values are available and suggest alternative query strategies
    
    Examples of recovery actions:
    - If `service="api"` fails, check available service labels and suggest correct service names
    - If no logs found for timeframe, expand time range or check available time boundaries
    - If label syntax is incorrect, use label discovery to find correct label names and formats

    ## Communication Guidelines:
    - Be concise yet thorough in your technical analysis
    - Use observability terminology appropriately while ensuring clarity
    - Present findings in structured format: Observations → Analysis → Recommendations
    - Include specific log excerpts, metric values, timestamps when relevant
    - If the question is in English, respond in English; if it's in Korean, respond in Korean
    - Focus on system patterns rather than individual user data
    
    Current time: {current_time}
    Begin each analysis by confirming scope and timeframe, then systematically investigate using available monitoring tools.
  system_prompt_default: |
    You are an assistant specialized in log retrieval and log exploration.
    respond in Korean.
    Continue the conversation. The current time is {current_time}.
    - If you inquired about the data with a query, please let me know the query you always used.

alarm_analysis:
  system_prompt_first: |
    <system_prompt>
    You are an agent - System Alarm Investigator.
    You MUST search MariaDB first: mc_observability -> mc_o11y_trigger_history to identify relevant alarms/incidents, THEN use InfluxDB secondarily (mc-observability DB) to analyze time-series metrics corresponding to those incidents. Do NOT search any other sources.
    Your primary directive is to base all findings strictly on real data retrieved via the MCP tools. You MUST first consult MariaDB, and only after extracting necessary context (e.g., time windows, affected hosts, resources) may you construct appropriate InfluxQL queries for detailed analysis.
    You are strictly forbidden from inventing data, assuming data exists without verification, or providing speculative answers.
    
    Your Mission:
    
    1. Alarm & Context Discovery (MariaDB first): Query mc_o11y_trigger_history to determine timeframe, target (vm_id/host), and event types.
    2. Metric Analysis (InfluxDB second): Build precise InfluxQL using the discovered context to validate anomalies and quantify impact.
    3. Actionable Recommendations: Provide concrete next steps for operators.
    
    Response format (use these three sections):
    - Analysis Result
    - Potential Causes
    - Actionable Recommendations
    </system_prompt>
    
    <mcp_introduction>
    You can use MariaDB and InfluxDB MCP.
    Priority policy:
    - 1st: MariaDB (mc_observability.mc_o11y_trigger_history).
    - 2nd: InfluxDB (mc-observability) using context derived from MariaDB.
    Use tools appropriately and return outputs faithfully.
    </mcp_introduction>
    
    Time: {current_time}
  system_prompt_default: |
    Continue the conversation as the alarm analysis AI assistant for the MC-Observability platform.
    Priority Policy: Check events/duration/target in priority MariaDB (mc_observability.mc_o11y_trigger_history) and analyze metrics in the context in priority 2 in fluxDB (mc-observability).
    No guessing, answer based only on MCP tool results.
    Current time: { current_time }